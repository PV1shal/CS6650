    public static void client(int threadGroupSize, int numThreadGroups, int delay, String IPAddr) throws URISyntaxException, InterruptedException {

        HttpClient httpClient = HttpClient.newHttpClient();

        final String getPath = "/assignment1_war_exploded/albums/1";
        final String postPath = "/assignment1_war_exploded/albums/";
        final String requestBody = "{\"profile\":{\"artist\":\"hi\",\"title\":\"hello\",\"year\":\"bye\"},\"image\":\"\"}";

        IPAddr = IPAddr.trim();
        String boundary = UUID.randomUUID().toString();

        long startTime = System.currentTimeMillis();

        // Initialize thread pool for the initial 10 threads
        ExecutorService initialThreadPool = Executors.newFixedThreadPool(10);

        for (int i = 0; i < 10; i++) {
            initialThreadPool.submit(() -> {
                for (int j = 0; j < 100; j++) {
                    try {
                        HttpRequest getRequest = HttpRequest.newBuilder()
                                .uri(URI.create(IPAddr + getPath))
                                .GET()
                                .build();
                        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());

                        HttpRequest postRequest = HttpRequest.newBuilder()
                                .uri(URI.create(IPAddr + postPath))
                                .header("Content-Type", "multipart/form-data; boundary=" + boundary)
                                .POST(HttpRequest.BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))
                                .build();
                        HttpResponse<String> postResponse = httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());

                        // Log responses or handle as needed
                        System.out.println("Thread: " + Thread.currentThread().getId() + " Call: " + j + " POST: " + postResponse.body() + " GET: " + getResponse.body());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        }

        initialThreadPool.shutdown();
        initialThreadPool.awaitTermination(Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS);

        for (int group = 0; group < numThreadGroups; group++) {
            System.out.println("Thread Group " + (group + 1) + " started");

            // Sleep for the specified delay period
            Thread.sleep(delay * 1000);

            // Create a new thread pool for the next thread group
            ExecutorService threadGroupPool = Executors.newFixedThreadPool(threadGroupSize);

            for (int i = 0; i < threadGroupSize; i++) {
                threadGroupPool.submit(() -> {
                    for (int j = 0; j < 1000; j++) {
                        try {
                            HttpRequest getRequest = HttpRequest.newBuilder()
                                    .uri(URI.create(IPAddr + getPath))
                                    .GET()
                                    .build();
                            HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());

                            HttpRequest postRequest = HttpRequest.newBuilder()
                                    .uri(URI.create(IPAddr + postPath))
                                    .header("Content-Type", "multipart/form-data; boundary=" + boundary)
                                    .POST(HttpRequest.BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))
                                    .build();
                            HttpResponse<String> postResponse = httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());

                            // Log responses or handle as needed
                            System.out.println("Thread: " + Thread.currentThread().getId() + " Call: " + j + " POST: " + postResponse.body() + " GET: " + getResponse.body());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }

            threadGroupPool.shutdown();
            threadGroupPool.awaitTermination(Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS);
        }

        long endTime = System.currentTimeMillis();
        double wallTimeInSeconds = (endTime - startTime) / 1000.0;
        System.out.println("Wall Time: " + wallTimeInSeconds + " seconds");
    }